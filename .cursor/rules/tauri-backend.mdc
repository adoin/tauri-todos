---
globs: src-tauri/**/*.rs
description: Tauri backend patterns and file I/O conventions
---

# Tauri Backend Patterns

## File Structure

- [src-tauri/src/lib.rs](mdc:src-tauri/src/lib.rs) - Main Tauri commands
- [src-tauri/tauri.conf.json](mdc:src-tauri/tauri.conf.json) - Tauri configuration

## Command Patterns

### File I/O Commands
```rust
#[tauri::command]
fn save_todos(todos: Value) -> Result<(), String> {
    // Save to data/todos.json
}

#[tauri::command]
fn load_todos() -> Result<Value, String> {
    // Load from data/todos.json, return [] if not exists
}

#[tauri::command]
fn save_settings(settings: Value) -> Result<(), String> {
    // Save to data/settings.json
}

#[tauri::command]
fn load_settings() -> Result<Value, String> {
    // Load from data/settings.json, return defaults if not exists
}
```

### Data Persistence Strategy
- **Separate files**: todos.json, settings.json, app_state.json, archived_todos.json
- **Error handling**: Return Result<(), String> for save operations
- **Default fallbacks**: Return sensible defaults when files don't exist
- **JSON serialization**: Use serde_json for data persistence

### Command Registration
```rust
.invoke_handler(tauri::generate_handler![
    save_todos, load_todos,
    save_settings, load_settings,
    save_app_state, load_app_state,
    save_archived_todos, load_archived_todos
])
```

## Data Directory Structure
```
data/
├── todos.json          # Current todo items
├── settings.json       # Todo settings (colors, archive days)
├── app_state.json      # App settings (window, locale, transparency)
└── archived_todos.json # Archived todo history
```

## Error Handling
- Use `Result<(), String>` for operations that can fail
- Provide meaningful error messages
- Handle file not found cases gracefully
- Use `?` operator for error propagation

## Frontend Integration
- Use `invoke()` from `@tauri-apps/api/core`
- Handle async operations with try-catch
- Separate save/load methods for different data types
- Use debounced saving for performance