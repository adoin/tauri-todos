name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.version-check.outputs.changed }}
      version: ${{ steps.version-check.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if version changed
        id: version-check
        run: |
          # 获取当前版本
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # 获取上一个提交的版本
          if git show HEAD~1:package.json > /dev/null 2>&1; then
            PREVIOUS_VERSION=$(git show HEAD~1:package.json | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).version")
          else
            PREVIOUS_VERSION="0.0.0"
          fi
          
          echo "previous-version=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
          
          # 比较版本
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "Version unchanged: $CURRENT_VERSION"
          fi

  # 公共准备步骤 - 只执行一次
  prepare:
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}" >> $GITHUB_OUTPUT

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache Tauri CLI specifically
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/tauri
          key: ${{ runner.os }}-tauri-cli-v2.0
          restore-keys: |
            ${{ runner.os }}-tauri-cli-

      - name: Install Tauri CLI (cached)
        shell: bash
        run: |
          # 检查 Tauri CLI 是否已安装且版本正确
          if command -v tauri &> /dev/null; then
            echo "Tauri CLI already installed, checking version..."
            tauri --version
          else
            echo "Installing Tauri CLI..."
            cargo install tauri-cli --version "^2.0" --locked
          fi

      - name: Build frontend
        run: pnpm build

      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: dist/
          retention-days: 1

      - name: Upload Rust cache
        uses: actions/upload-artifact@v4
        with:
          name: rust-cache
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          retention-days: 1

  # 多平台构建 - 并行执行
  build:
    needs: [check-version, prepare]
    if: needs.check-version.outputs.version-changed == 'true' || github.event_name == 'pull_request'
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'
            target: 'x86_64-pc-windows-msvc'
            os: 'win32'
            arch: 'x64'
            suffix: '.exe'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
            os: 'darwin'
            arch: 'x64'
            suffix: ''
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
            os: 'darwin'
            arch: 'arm64'
            suffix: ''
          - platform: 'ubuntu-latest'
            args: '--target x86_64-unknown-linux-gnu'
            target: 'x86_64-unknown-linux-gnu'
            os: 'linux'
            arch: 'x64'
            suffix: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: dist/

      # 安装系统依赖
      - name: Install system dependencies (Linux)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.0-dev \
            build-essential \
            curl \
            wget \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libglib2.0-dev \
            libgdk-pixbuf2.0-dev \
            libpango1.0-dev \
            libatk1.0-dev \
            libcairo-gobject2 \
            libgtk-3-0 \
            libgdk-pixbuf2.0-0

      - name: Install system dependencies (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          brew install webkit2gtk

      - name: Install system dependencies (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          # Windows 通常不需要额外的系统依赖
          echo "Windows build - no additional dependencies needed"

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Download Rust cache
        uses: actions/download-artifact@v4
        with:
          name: rust-cache
          path: ~/.cargo/

      - name: Cache Rust target
        uses: actions/cache@v4
        with:
          path: src-tauri/target/
          key: ${{ runner.os }}-cargo-target-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-${{ matrix.target }}-
            ${{ runner.os }}-cargo-target-

      - name: Verify Tauri CLI
        shell: bash
        run: |
          if command -v tauri &> /dev/null; then
            echo "Tauri CLI found:"
            tauri --version
          else
            echo "Tauri CLI not found, installing..."
            cargo install tauri-cli --version "^2.0" --locked
          fi

      - name: Build Tauri app
        run: pnpm tauri build ${{ matrix.args }}
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tauri-app-${{ matrix.os }}-${{ matrix.arch }}
          path: src-tauri/target/${{ matrix.target }}/release/bundle/
          retention-days: 30

  release:
    needs: [check-version, build]
    if: needs.check-version.outputs.version-changed == 'true' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          release_name: Release v${{ needs.check-version.outputs.version }}
          body: |
            ## 更新内容
            
            - 版本: v${{ needs.check-version.outputs.version }}
            - 支持平台: Windows (x64), macOS (Intel & Apple Silicon), Linux (x64)
            
            ## 下载链接
            
            请根据您的操作系统选择对应的安装包：
            
            - **Windows**: 下载 `.exe` 文件
            - **macOS Intel**: 下载 `x64` 版本
            - **macOS Apple Silicon**: 下载 `arm64` 版本  
            - **Linux**: 下载 `.AppImage` 或 `.deb` 文件
          draft: false
          prerelease: false

      - name: Upload Release Assets
        run: |
          # 查找并上传所有构建产物
          find ./artifacts -name "*.msi" -o -name "*.dmg" -o -name "*.AppImage" -o -name "*.deb" | while read file; do
            filename=$(basename "$file")
            echo "Uploading $filename"
            gh release upload v${{ needs.check-version.outputs.version }} "$file" --clobber
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
